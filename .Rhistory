2+2
2+2
license()
help()
knitr::opts_chunk$set(echo = TRUE)
getwd()
setwd("/Users/stephenreagin/Desktop/USD/USD_GitHub/ADS_503_applied_predictive_modeling/Module_1")
glass_df <- read.csv("/Users/stephenreagin/Desktop/USD/USD_GitHub/ADS_503_applied_predictive_modeling/Module_1/glass.data")
head(glass_df)
library(mlbench)
install.packages("mlbench")
#install.packages("mlbench")
library(mlbench)
mlbench
#install.packages("mlbench")
glass_df <- library(mlbench)
head(glass_df)
head(glass_df.datasets)
head(glass_df$datasets)
#install.packages("mlbench")
library(mlbench)
data(Glass)
glass_df <- data(Glass)
head(glass_df)
glass_df <- data("Glass")
head(glass_df)
#install.packages("mlbench")
library(mlbench)
glass_df <- data("Glass")
head(glass_df)
library(mlbench)
data(Glass)
Glass
glass_df <- Glass
glass_df
head(glass_df)
hist(Glass)
boxplot(glass_df)
hist(glass_df)
str(glass_df)
pairs(glass_df)
cor(glass_df)
sapply(glass_df, function(x) sum(is.na(x)))
sapply(glass_df, function(x) sum(is.numeric(x)))
sapply(glass_df[-10], function(x) sum(is.numeric(x)))
sapply(glass_df, function(x) sum(is.numeric(x)))
glass_sub_df <- glass_df[-10]
boxplot(glass_sub_df)
pairs(glass_sub_df)
cor(glass_sub_df)
data.frame(cor(glass_sub_df))
round(data.frame(cor(glass_sub_df)),2)
hist(glass_df$RI ~ glass_df$Type)
boxplot(glass_df$RI ~ glass_df$Type)
boxplot(glass_df$Na ~ glass_df$Type)
par(mfrow = c(1,2))
boxplot(glass_df$RI ~ glass_df$Type)
boxplot(glass_df$Na ~ glass_df$Type)
par(mfrow = c(2,1))
par(mfrow = c(2,1))
boxplot(glass_df$RI ~ glass_df$Type)
boxplot(glass_df$Na ~ glass_df$Type)
par(mfrow = c(2,2))
boxplot(glass_df$RI ~ glass_df$Type)
boxplot(glass_df$Na ~ glass_df$Type)
boxplot(glass_sub_df)
hist(glass_df$RI)
hist(glass_sub_df)
hist(glass_df)
hist(glass_df$RI)
hist.data.frame(glass_sub_df)
library(Hmisc)
hist.data.frame(glass_sub_df)
head(glass_df, 2)
boxplot(glass_df$RI ~ glass_df$Type)
par(mfrow = c(3,3))
boxplot(glass_df$RI ~ glass_df$Type)
boxplot(glass_df$Na ~ glass_df$Type)
boxplot(glass_df$Mg ~ glass_df$Type)
boxplot(glass_df$Al ~ glass_df$Type)
boxplot(glass_df$Si ~ glass_df$Type)
boxplot(glass_df$K ~ glass_df$Type)
boxplot(glass_df$Ca ~ glass_df$Type)
boxplot(glass_df$Ba ~ glass_df$Type)
boxplot(glass_df$Fe ~ glass_df$Type)
layout(matrix(1,2,3,4,5,6,7,8,9))
layout(matrix((1,2,3,4,5,6,7,8,9)))
layout(matrix(c(1,2,3,4,5,6,7,8,9)))
boxplot(glass_df$RI ~ glass_df$Type)
layout(matrix(c(1,2,3,4,5,6,7,8,9), nrow = 3, ncol = 3))
boxplot(glass_df$RI ~ glass_df$Type)
boxplot(glass_df$Na ~ glass_df$Type)
boxplot(glass_df$Mg ~ glass_df$Type)
boxplot(glass_df$Al ~ glass_df$Type)
boxplot(glass_df$Si ~ glass_df$Type)
boxplot(glass_df$K ~ glass_df$Type)
boxplot(glass_df$Ca ~ glass_df$Type)
boxplot(glass_df$Ba ~ glass_df$Type)
boxplot(glass_df$Fe ~ glass_df$Type)
#view scatterplots for each predictor combination
pairs(glass_sub_df)
#correlation coefficients
round(data.frame(cor(glass_sub_df)),2)
sqrt(glass_sub_df$Mg)
hist(sqrt(glass_sub_df$Mg))
hist((1 / glass_sub_df$Mg))
hist(log(glass_sub_df$Mg))
hist(log(glass_sub_df$Fe))
hist(sqrt(glass_sub_df$Fe))
hist(log(glass_sub_df$Fe))
hist(log(glass_sub_df$Ba))
hist(sqrt(glass_sub_df$Ba))
hist((glass_sub_df$Ba)^1.5)
hist(glass_sub_df$Ba))
hist(glass_sub_df$Ba)
hist(log(glass_sub_df$Ba))
hist((glass_sub_df$Ba)^(1/2))
hist((glass_sub_df$Ba)^(1/3))
hist((glass_sub_df$Ba)^(1/4))
hist((glass_sub_df$Ba+1)^(1/4))
hist((glass_sub_df$Ba+1)^(1/2))
hist((glass_sub_df$Ba))
hist(1/(glass_sub_df$Ba))
hist((1/(glass_sub_df$Ba)))
hist(log(1/(glass_sub_df$Ba)))
hist(log((glass_sub_df$Ba)))
library("caret")
2+2
knitr::opts_chunk$set(echo = TRUE)
#getwd()
setwd("/Users/stephenreagin/Desktop/USD/USD_GitHub/ADS_503_applied_predictive_modeling/Module_1")
#getwd()
#setwd("/Users/stephenreagin/Desktop/USD/USD_GitHub/ADS_503_applied_predictive_modeling/Module_1")
#install.packages("mlbench")
library(mlbench)
data(Glass)
glass_df <- Glass
head(glass_df, 2)
#seeing which features are numeric
sapply(glass_df, function(x) sum(is.numeric(x)))
#removing the "Type" response variable for simple visuals
glass_sub_df <- glass_df[-10]
#view a boxplot of each predictor
boxplot(glass_sub_df)
#correlation coefficients
round(data.frame(cor(glass_sub_df)),2)
#view scatterplots for each predictor combination
pairs(glass_sub_df)
### another part
library(Hmisc)
#histograms for each predictor
hist.data.frame(glass_sub_df)
#boxplots for each predictor, separated by the response variable
par(mfrow = c(3,3))
boxplot(glass_df$RI ~ glass_df$Type)
par(mfrow = c(3,3))
boxplot(glass_df$RI ~ glass_df$Type)
boxplot(glass_df$Na ~ glass_df$Type)
boxplot(glass_df$Mg ~ glass_df$Type)
boxplot(glass_df$Al ~ glass_df$Type)
boxplot(glass_df$Si ~ glass_df$Type)
boxplot(glass_df$K ~ glass_df$Type)
boxplot(glass_df$Ca ~ glass_df$Type)
boxplot(glass_df$Ba ~ glass_df$Type)
boxplot(glass_df$Fe ~ glass_df$Type)
#histograms for each predictor
hist.data.frame(glass_sub_df)
hist(log(glass_sub_df$Fe))
hist(log((glass_sub_df$Ba)))
library(caret)
bct_ba <- BoxCoxTrans(glass_sub_df$Ba)
ba_trans <- predict(bct_ba, glass_sub_df$Ba)
hist(ba_trans)
hist(bct_ba)
bct_ba
library(e1071)
skewness(glass_sub_df$Ba)
hist(ba_trans)
hist((glass_sub_df$Ba))
bct_ba <- BoxCoxTrans((glass_sub_df$Ba + 10^-4))
bct_ba
ba_trans <- predict(bct_ba, glass_sub_df$Ba)
hist(ba_trans)
hist(log(ba_trans))
hist(ba_trans)
bct_ba
ba_trans <- predict(bct_ba, glass_sub_df$Ba)
hist(ba_trans)
hist(-ba_trans)
hist(-ba_trans+1)
hist(log(-ba_trans+1))
hist(log(glass_sub_df$Fe))
hist(log(glass_sub_df$Ba))
hist(log(glass_sub_df$K))
bct_ba <- BoxCoxTrans((glass_sub_df$Ba + 10^-4))
ba_trans <- predict(bct_ba, glass_sub_df$Ba)
hist(log(-ba_trans+1))
bct_k <- BoxCoxTrans((glass_sub_df$K))# + 10^-4))
bct_k <- BoxCoxTrans((glass_sub_df$K + 10^-4))
k_trans <- predict(bct_k, glass_sub_df$K)
hist(log(-k_trans+1))
hist(k_trans)
hist(1 / k_trans)
hist(log(k_trans+5))
hist(log(glass_sub_df$Fe))
hist(log(glass_sub_df$Ba))
hist((k_trans))
hist(log(glass_sub_df$K))
skewness(glass_sub_df)
skewness(glass_sub_df$Ba)
skewness(glass_sub_df$RI)
skewness(glass_sub_df$Na)
skewness(glass_sub_df$Mg)
skewness(glass_sub_df$Al)
skewness(glass_sub_df$Si)
skewness(glass_sub_df$K)
skewness(glass_sub_df$K)
skewness(glass_sub_df$Ca)
skewness(glass_sub_df$Ba)
skewness(glass_sub_df$Fe) #   =
skewness(k_trans)
skewness(log(glass_sub_df$K))
hist(log(glass_sub_df$K))
skewness(log(glass_sub_df$K + 10^-5))
skewness(log(glass_sub_df$K))
skewness(log(glass_sub_df$K + 10^-5))
skewness(log(glass_sub_df$K + 10^-4))
skewness(k_trans)
skewness(glass_sub_df$K)
getwd()
read.csv("/Users/stephenreagin/Desktop/USD/USD_GitHub/ADS_503_applied_predictive_modeling/Module_1/hcvdat0.csv")
head(hcv_df)
hcv_df <- read.csv("/Users/stephenreagin/Desktop/USD/USD_GitHub/ADS_503_applied_predictive_modeling/Module_1/hcvdat0.csv")
head(hcv_df)
summarize(hcv_df)
describe(hcv_df)
sapply(hcv_df, function(x) sum(is.na(x))) # using sapply to find count of NA values
hcv_df[4:13]
hcv_df[5:13]
hcv_sub_df <- hcv_df[5:13]
sapply(hcv_sub_df, function(x) sum(is.na(x))) # using sapply to find count of NA values
hcv_sub_df <- hcv_df[5:14]
sapply(hcv_sub_df, function(x) sum(is.na(x)))
hist.data.frame(hcv_sub_df)
hist(hcv_sub_df$ALT)
hist(hcv_sub_df$AST)
hist(hcv_sub_df$BIL)
hist(hcv_sub_df$CREA)
hist(hcv_sub_df$GGT)
skewness(hcv_sub_df$ALB)
skewness(hcv_sub_df$ALB+10^-5)
skewness(hcv_sub_df$ALP)
skewness(hcv_sub_df$ALB, na.rm = TRUE)
skewness(hcv_sub_df$ALP, na.rm = TRUE)
skewness(hcv_sub_df$ALB, na.rm = TRUE) #  =
skewness(hcv_sub_df$ALP, na.rm = TRUE) #  =
skewness(hcv_sub_df$ALT, na.rm = TRUE) #  =
skewness(hcv_sub_df$AST, na.rm = TRUE) #  =
skewness(hcv_sub_df$BIL, na.rm = TRUE) #  =
skewness(hcv_sub_df$CHE, na.rm = TRUE) #  =
skewness(hcv_sub_df$CHOL, na.rm = TRUE) # =
skewness(hcv_sub_df$CREA, na.rm = TRUE) # =
skewness(hcv_sub_df$GGT, na.rm = TRUE) #  =
skewness(hcv_sub_df$PROT, na.rm = TRUE) # =
BoxCoxTrans((hcv_sub_df))
BoxCoxTrans((hcv_sub_df$ALB))
BoxCoxTrans((hcv_sub_df$ALB + 10^-4))
BoxCoxTrans((hcv_df$ALB + 10^-4))
BoxCoxTrans((hcv_sub_df$ALP + 10^-4))
hcv_sub_df
BoxCoxTrans((hcv_sub_df$ALP + 10^-4), na.rm = TRUE)
BoxCoxTrans((hcv_sub_df$ALP), na.rm = TRUE)
bct_ALB <- BoxCoxTrans((hcv_sub_df$ALB), na.rm = TRUE)
bct_ALP <- BoxCoxTrans((hcv_sub_df$ALP), na.rm = TRUE)
bct_ALT <- BoxCoxTrans((hcv_sub_df$ALT), na.rm = TRUE)
bct_AST <- BoxCoxTrans((hcv_sub_df$AST), na.rm = TRUE)
bct_BIL <- BoxCoxTrans((hcv_sub_df$BIL), na.rm = TRUE)
bct_ALB <- BoxCoxTrans((hcv_sub_df$ALB), na.rm = TRUE)
bct_ALP <- BoxCoxTrans((hcv_sub_df$ALP), na.rm = TRUE)
bct_ALT <- BoxCoxTrans((hcv_sub_df$ALT), na.rm = TRUE)
bct_AST <- BoxCoxTrans((hcv_sub_df$AST), na.rm = TRUE)
bct_BIL <- BoxCoxTrans((hcv_sub_df$BIL), na.rm = TRUE)
bct_CHE <- BoxCoxTrans((hcv_sub_df$CHE), na.rm = TRUE)
bct_CHOL <- BoxCoxTrans((hcv_sub_df$CHOL), na.rm = TRUE)
bct_CREA <- BoxCoxTrans((hcv_sub_df$CREA), na.rm = TRUE)
bct_GGT <- BoxCoxTrans((hcv_sub_df$GGT), na.rm = TRUE)
bct_PROT <- BoxCoxTrans((hcv_sub_df$PROT), na.rm = TRUE)
ALB_trans <- predict(bct_ALB, hcv_sub_df$ALB)
ALP_trans <- predict(bct_ALP, hcv_sub_df$ALP)
ALT_trans <- predict(bct_ALT, hcv_sub_df$ALT)
AST_trans <- predict(bct_AST, hcv_sub_df$AST)
BIL_trans <- predict(bct_BIL, hcv_sub_df$BIL)
CHE_trans <- predict(bct_CHE, hcv_sub_df$CHE)
CHOL_trans <- predict(bct_CHOL, hcv_sub_df$CHOL)
CREA_trans <- predict(bct_CREA, hcv_sub_df$CREA)
GGT_trans <- predict(bct_GGT, hcv_sub_df$GGT)
PROT_trans <- predict(bct_PROT, hcv_sub_df$PROT)
hist(hcv_sub_df$GGT)
hist.data.frame(hcv_sub_df)
par(mfrow = c(4,3))
hist((ALB_trans))
par(mfrow = c(4,4))
par(mfrow = c(4,4))
hist((ALB_trans))
par(mfrow = c(5,2))
hist((ALB_trans))
hist((ALB_trans))
hist((ALP_trans))
par(mfrow = c(3,4))
hist((ALB_trans))
hist((ALP_trans))
hist((ALT_trans))
hist((AST_trans))
hist((BIL_trans))
hist((CHE_trans))
hist((CHOL_trans))
hist((CREA_trans))
hist((GGT_trans))
hist((PROT_trans))
skewness((ALB_trans))
skewness((ALB_trans), na.rm = TRUE)
skewness((ALB_trans), na.rm = TRUE)
skewness((ALB_trans), na.rm = TRUE) #   =
skewness((ALP_trans), na.rm = TRUE) #   =
skewness((ALT_trans), na.rm = TRUE) #   =
skewness((AST_trans), na.rm = TRUE) #   =
skewness((BIL_trans), na.rm = TRUE) #   =
skewness((CHE_trans), na.rm = TRUE) #   =
skewness((CHOL_trans), na.rm = TRUE) #  =
skewness((CREA_trans), na.rm = TRUE) #  =
skewness((GGT_trans), na.rm = TRUE) #   =
skewness((PROT_trans), na.rm = TRUE) #  =
skewness((PROT_trans), na.rm = TRUE) #  =
2+2
apropos("confusion")
library((AppliedPredictiveModeling))
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
2+2
apropos("confusion")
library(caret)
apropos("confusion")
library(corrplot)
install.packages("corrplot")
library(corrplot)
library(lattice)
apropos("confusion")
RSiteSearch("confusion", restrict = "functions")
data(segmentationOriginal)
segData <- subset(segmentationOriginal, Case == "Train")
segData$Cell
cellID <- segData$Cell
class <- segData$Class
case <- segData$Case
#now remove columns
segData <- segData[,-(1:3)]
segData
head(segData)
statusColNum <- grep("Status", names(segData))
statusColNum
segData <- segData[, -statusColNum]
library(e1071)
skewness(segData$AngleCh1)
#measuring skewness of one predictor
skewness(segData$AngleCh1)
#since all predictors are numeric,the apply function can be used to compute skewness across the columns
skewValues <- apply(segData, 2, skewness)
head(skewValues)
skewValues
library(caret)
Ch1AreaTrans <- BoxCoxTrans(segData$AreaCh1)
Ch1AreaTrans
#original data
segData$AreaCh1
#original data
head(segData$AreaCh1)
predict(Ch1AreaTrans, head(segData$AreaCh1))
help(predict())
help(predict
help(predict)
predict(Ch1AreaTrans, head(segData$AreaCh1))
Ch1AreaTrans
pcaObject <- prcomp(segData, center = TRUE, scale. = TRUE)
#calculate cumulative percentage of variance which each component accounts for
percentVariance <- pcaObject$sdev^2 / sum(pcaObject$sdev^2) * 100
percentVariance
percentVariance[1:3]
head(pcaObject[, 1:5])
head(pcaObject[, (1:5)])
head(pcaObject$x[, 1:5])
head(pcaObject$rotation)
head(pcaObject$rotation[, 1:5])
head(pcaObject$rotation[, 1:3])
trans <- preProcess(segData,
method = c("BoxCox", "center", "scale", "pca"))
trans
#apply the transformations
transformed <- predict(trans, SegData)
#apply the transformations
transformed <- predict(trans, segData)
#these values are different than the previous PCA components since
# they were transformed prior to PCA
head(transformed[, 1"5"])
#these values are different than the previous PCA components since
# they were transformed prior to PCA
head(transformed[, 1:5])
nearZeroVar(segData)
correlations <- cor(segData)
dorrelations
correlations
head(correlations)
dim(correlations)
#dimensionality
dim(correlations)
correlations[1:4, 1:4]
#we can visually examine the correlation structure using the corrplot package
library(corrplot)
corrplot(correlations, order = "hclust")
#to filter by correlations, the findCorrelation function implements the
# pseudo algorithm in section 3.5
highCorr <- findCorrelation(correlations, cutoff = 0.75)
length(highCorr)
head(highCorr)
filteredSegData <- segData[, -highCorr]
head(carSubset)
data(cars)
cars_df <- data(cars)
cars_df
cars_df <- data("cars")
cars_df
data(cars)
data(mtcars)
cars_df <- data(mtcars)
cars_df
head(cars_df)
cars_df <- data("mtcars")
head(cars_df)
data(mtcars)
head(data(mtcars))
data()
dataset(cars)
library(datasets)
dataset(cars)
datasets(cars)
datasets
help(datasets)
datasets('cars')
data()
data("mtcars")
head(data("mtcars"))
getwd()
setwd("/Users/stephenreagin/Desktop/ADS503_project/ADS503"
getwd()
setwd("/Users/stephenreagin/Desktop/ADS503_project/ADS503")
getwd()
pwd()
main_data <- read.csv('risk_factors_cervical_cancer.csv')
main_data
library(MASS)
library(dplyr)
library(caret)
nearZeroVar(main_data)
as.integer(nearZeroVar(main_data))
#checking for zero variance predictors
data_nearzero <- as.integer(nearZeroVar(main_data))
sapply(main_data, function(x) sum(is.na(x)))
main_data[,data_nearzero]
main_data
setwd("/Users/stephenreagin/Desktop/ADS503_project/ADS503")
main_data <- read.csv('risk_factors_cervical_cancer.csv')
View(main_data)
data_miss <- sapply(main_data, function(x) sum(is.na(x)))
data_miss
which(main_data == "?", arr.ind = TRUE)
unlist(which(main_data == "?", arr.ind = TRUE))
as.data.frame(unlist(which(main_data == "?", arr.ind = TRUE)))
as.data.frame(unlist(which(main_data == "?", arr.ind = TRUE)))
as.data.frame(unlist(which(main_data == "?", arr.ind = TRUE)))
q_idx <- as.data.frame(unlist(which(main_data == "?", arr.ind = TRUE)))
q_idx[1]
unlist(q_idx[1])
unique(unlist(q_idx[1]))
main_data[c(rows),]
#rows with missing "?" data points
# note this is NOT a total count of "?" points
# but a count of whether or not a given row has AT LEAST ONE "?"
rows <- unique(unlist(q_idx[1]))
main_data[c(rows),]
data_test <- main_data[c(rows),]
View(data_test)
data[ == "?"]
main_data[ == "?"]
main_data[main_data == "?"]
main_data[main_data == "?"] <- NA
View(main_data)
data_miss
sapply(main_data, function(x) sum(is.na(x)))
# check for missing data
data_miss <- sapply(main_data, function(x) sum(is.na(x)))
View(main_data)
sapply(main_data, function(x) sum(is.na(x)))
data_wstd <- main_data
View(data_wstd)
View(main_data)
View(main_data)
